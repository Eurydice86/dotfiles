import datetime


def log_progress(message):
    output = str(datetime.datetime.now()) + ": " + message + "\n"
    print(output)
    with open("code_log.txt", "a") as file:
        file.write(output)


import requests
from bs4 import BeautifulSoup
import pandas as pd


def extract():
    banks = []

    page = requests.get("https://en.wikipedia.org/wiki/List_of_largest_banks").text
    soup = BeautifulSoup(page, features="html.parser")
    banks_table = soup.find("table", {"class": "mw-collapsible"})
    rows = banks_table.find_all(name="tr")

    for r, row in enumerate(rows[1:]):
        cells = row.find_all("td")

        rank = int(cells[0].text.strip())
        bank_name = cells[1].text.strip()
        assets = float(cells[2].text.strip().replace(",", ""))
        banks.append(
            [rank, bank_name, assets]
        )
    df = pd.DataFrame(banks, columns=["Rank", "BankName", "TotalAssets(USDBillion)"])
    return df


def transform(df):
    conversion_rates = requests.get("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMSkillsNetwork-PY0221EN-Coursera/labs/v2/exchange_rate.csv").text.split("\n")
    usd_to_eur = float(conversion_rates[1].split(",")[1].strip())
    usd_to_gbp = float(conversion_rates[2].split(",")[1].strip())
    usd_to_inr = float(conversion_rates[3].split(",")[1].strip())

    eur = round(df.loc[:, "TotalAssets(USDBillion)"] * usd_to_eur, 2)
    df.insert(3, "TotalAssets(EURBillion)", eur)
    gbp = round(df.loc[:, "TotalAssets(USDBillion)"] * usd_to_gbp, 2)
    df.insert(4, "TotalAssets(GBPBillion)", gbp)
    inr = round(df.loc[:, "TotalAssets(USDBillion)"] * usd_to_inr, 2)
    df.insert(5, "TotalAssets(INRBillion)", inr)

    return df

def transform2(df, csv_path):
    ''' This function accesses the CSV file for exchange rate
    information, and adds three columns to the data frame, each
    containing the transformed version of Market Cap column to
    respective currencies'''

    with open("exchange_rate.csv", "r") as file:
        conversion_rates = file.readlines()
        usd_to_eur = float(conversion_rates[1].split(",")[1].strip())
        usd_to_gbp = float(conversion_rates[2].split(",")[1].strip())
        usd_to_inr = float(conversion_rates[3].split(",")[1].strip())

        eur = round(df.loc[:, "TotalAssets(USDBillion)"] * usd_to_eur, 2)
        df.insert(3, "TotalAssets(EURBillion)", eur)
        gbp = round(df.loc[:, "TotalAssets(USDBillion)"] * usd_to_gbp, 2)
        df.insert(4, "TotalAssets(GBPBillion)", gbp)
        inr = round(df.loc[:, "TotalAssets(USDBillion)"] * usd_to_inr, 2)
        df.insert(5, "TotalAssets(INRBillion)", inr)

        return df


def load_to_csv(df):
    df.to_csv("banks.csv", index=False)
        


if __name__ == "__main__":
    # log_progress("Preliminaries complete. Initiating ETL process")

    banks_df = extract()
    # log_progress("Data extraction complete. Initiating Transformation process")

    banks_df = transform2(banks_df, "exchange_rate.csv")
    # log_progress("Data transformation complete. Initiating Loading process")

    load_to_csv(banks_df)
    # log_progress("Data saved to CSV file")
    #SQL Connection initiated
    #Data loaded to Database as a table, Executing queries
    #Process Complete
    #Server Connection closed
