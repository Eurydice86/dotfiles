#include <cmath>
#include <cstdio>
#include <iostream>
#include <numbers>

//----------------------//
struct Params {
  double epsilon;
  double k;
  double a;
  double b;

  Params(double _epsilon, double _k) {
    this->epsilon = _epsilon;
    this->k = _k;
    double st = std::sqrt(1 - this->epsilon * this->epsilon);
    this->b = -this->epsilon /
              (st * 2 * this->k * std::pow(this->epsilon, 2 * this->k - 1));
    this->a = st - this->b * std::pow(epsilon, 2 * this->k);

    std::cout << "b = " << b << ", a =" << a << "\n";
  }
};

struct Point {
  double x, y;
  Point(double _x, double _y) {
    this->x = _x;
    this->y = _y;
  }
};

//----------------------//

double f(double x, Point p, Params params) {
  double term_1 = (2 * params.k - 1) * params.b * std::pow(x, 2 * params.k);
  double term_2 = 2 * params.k * params.b * p.x * std::pow(x, 2 * params.k - 1);
  std::cout << term_1 - term_2 + p.y - params.a << "\n";
  return term_1 - term_2 + p.y - params.a;
}

double df(double x, Point p, Params params) {
  double term_1 = 2 * params.k * (2 * params.k - 1) * params.b *
                  std::pow(x, 2 * params.k - 1);
  double term_2 = 2 * params.k * (2 * params.k - 1) * params.b * p.x *
                  std::pow(x, 2 * params.k - 2);
  std::cout << term_1 - term_2 << "\n";
  return term_1 - term_2;
}

bool is_in_critical_area(Point p, Params params) {
  double upper_line = (1 - params.epsilon * p.x) /
                      (std::sqrt(1 - params.epsilon * params.epsilon));
  double lower_line = (1 + params.epsilon * p.x) /
                      (std::sqrt(1 - params.epsilon * params.epsilon));
  double replacement_curve =
      (params.a + params.b * std::pow(p.x, 2 * params.k));

  if (p.x > params.epsilon) {
    return false;
  }

  if (p.x < -params.epsilon) {
    if (p.y < upper_line && p.y > lower_line) {
      return true;
    }
  }

  if (p.x > -params.epsilon && p.x < params.epsilon) {
    if (p.y < upper_line && p.y > replacement_curve) {
      return true;
    }
  }
  return false;
}

Point map_on_circle(Point p) {
  double r = std::sqrt(p.x * p.x + p.y * p.y);
  double phi = std::atan2(p.y, p.x);

  double new_phi = phi - 2 * std::acos(1 / r);
  Point new_p{r * std::cos(new_phi), r * std::sin(new_phi)};

  return new_p;
}

Point bisection(Point p, Params params) {
  double left = -params.epsilon;
  double right = params.epsilon;
  double accuracy = std::pow(10, -6);

  while (std::fabs(left - right) > accuracy) {
    double root_estimate = f((left + right) / 2.0, p, params);
    if (root_estimate < 0) {
      left = (left + right) / 2.0;
    } else {
      right = (left + right) / 2.0;
    }
    std::cout << left << ", " << right << "\n";
  }
  return p;
}

Point map_on_replacement_curve(Point p, Params params) {
  double x = 0.0;
  double new_x;
  double accuracy = std::pow(10, -6);
  bool accuracy_reached = false;
  do {
    new_x = x - f(x, p, params) / df(x, p, params);
    std::cout << "x: " << p.x << "\n";
    std::cout << "x_T: " << new_x << "\n";
    if (std::fabs(new_x - x) < accuracy) {
      Point new_p(x, p.y);
      return new_p;
    }
  } while (false);

  return p;
}

int main() {

  Point p(-1, 1);

  double epsilon = 0.1;
  double k = 4;
  Params params(epsilon, k);

  std::cout << "Initial point\n";
  std::cout << "(" << p.x << "," << p.y << ")\n";
  std::cout << "Bisection\n\n\n";  
  bisection(p, params);
}
